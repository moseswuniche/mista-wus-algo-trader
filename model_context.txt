**Project:** Mista Wus Algo Trader

**Description:** A Python-based algorithmic trading bot framework for cryptocurrencies on Binance. It features a **component-based architecture** for live trading, standardized backtesting/forward testing using **`backtrader`**, parameter optimization, and state persistence. Supports modular strategies inheriting from a common `backtrader` base.

**Core Components:**
*   `src/trading_bots/trader.py`: Orchestrator for the live trading bot. Initializes and coordinates components.
*   `src/trading_bots/trader_components/`: Contains individual components managing specific live trading aspects:
    *   `ClientManager`: Handles Binance API client and WebSocket connection.
    *   `DataHandler`: Fetches historical data, processes WebSocket Kline messages, prepares data (indicators/signals) via the strategy instance.
    *   `OrderExecutor`: Executes buy/sell market orders.
    *   `PositionManager`: Tracks position state (size, entry price), calculates PnL, handles SL/TP/TSL logic execution (via `OrderExecutor`), and logs trades.
    *   `RiskManager`: Enforces risk limits (e.g., max cumulative loss) and interacts with `PositionManager`.
    *   `StateManager`: Saves and loads the state of managed components (PositionManager, RiskManager, DataHandler) to/from JSON files in `results/state/`.
    *   `RuntimeConfigManager`: Loads and periodically checks for updates in `config/runtime_config.yaml`.
    *   `CsvTradeLogger`: Logs executed live trades to CSV files in `results/live_trades/`.
*   `src/trading_bots/strategies/`: Directory containing strategy implementations (e.g., `MovingAverageCrossoverStrategy`, `ScalpingStrategy`, `BollingerBandReversionStrategy`, `MomentumStrategy`, `MeanReversionStrategy`, `BreakoutStrategy`, `HybridStrategy`). All inherit from `base_strategy.BaseStrategy` (which inherits from `backtrader.Strategy`).
*   `src/trading_bots/backtest.py`: Provides the `run_backtest` function using the `backtrader` engine. Simulates strategy performance based on `BacktestRunConfig`, including intra-bar SL/TP logic, standard analyzers, optional plotting, and trade logging.
*   `src/trading_bots/forward_test.py`: Runs `run_backtest` using optimized parameters (loaded from `*_best_params_*.yaml`) on a forward period. Generates HTML reports and trade logs.
*   `src/trading_bots/optimize.py`: Performs grid search optimization using `run_backtest` for parallel evaluation. Reads parameter grids from `config/optimize_params.yaml`. Saves best results to individual `{metric}_best_params_*.yaml` files and optionally detailed summaries to CSV.
*   `src/trading_bots/run_batch_forward_test.py`: Runs `forward_test.py` for all found `*_best_params_*.yaml` files.
*   `src/trading_bots/run_batch_optimization.py`: Runs multiple `optimize.py` tasks in parallel.
*   `src/trading_bots/fetch_data.py`: Downloads historical K-line data.
*   `src/trading_bots/technical_indicators.py`: Indicator calculation functions.
*   `src/trading_bots/config_models.py`: Pydantic models (`BacktestRunConfig`, `RuntimeConfig`, etc.) for configuration validation.
*   `src/trading_bots/data_utils.py`: Data loading helpers.
*   `src/trading_bots/reporting_utils.py`: HTML report generation.
*   `config/`: Contains YAML configuration files (`optimize_params.yaml`, `runtime_config.yaml`). `*_best_params_*.yaml` files are generated here by `optimize.py`.
*   `results/`: Default output directory.
    *   `optimize/`: Optimization results (`*.yaml`, `details/*.csv`).
    *   `forward_test/`: Forward test results (`plots/`, `reports/`, `trades/*.csv`).
    *   `live_trades/`: Logs from the live trader (`CsvTradeLogger`).
    *   `state/`: Persisted JSON state files from `StateManager`.
*   `data/`: Default storage for CSV market data.
*   `Makefile`: Provides commands for install, fetch, optimize, test, trade, lint, etc.

**Key Concepts:**
*   **Component Architecture:** Live trader (`trader.py`) delegates responsibilities to specialized components in `trader_components/`.
*   **`backtrader` Engine:** Used for standardized backtesting and forward testing (`run_backtest`).
*   **`BaseStrategy`:** Common base class for all strategies, inheriting from `backtrader.Strategy`, providing shared logic (logging, SL/TP price calculation, filter checks).
*   **`BacktestRunConfig`:** Pydantic model defining configuration for `run_backtest`.
*   **`StateManager`:** Handles persistence of live trader state across restarts.
*   **Configuration Files:**
    *   `optimize_params.yaml`: Defines parameter search space for optimization.
    *   `{metric}_best_params_*.yaml`: Stores best parameters found by optimization.
    *   `runtime_config.yaml`: Allows runtime adjustments for the live trader.
*   **Filtering Logic:** Filters (ATR, Seasonality) are defined as parameters within strategies (`params` tuple) and enabled/configured via parameter files (`optimize_params.yaml`, `*_best_params_*.yaml`, `runtime_config.yaml`). `BaseStrategy` provides checks, and `DataHandler` may pre-calculate necessary indicators.

**Key Makefile Targets & Workflow:**
1.  `make install`
2.  `make fetch-data`
3.  `make optimize` / `make optimize-batch` / `make trigger-threaded-optimizer`: Run optimization, generating `*_best_params_*.yaml` files.
4.  `make forward-test`: Run a single forward test using a specific `*_best_params_*.yaml` file.
5.  `make forward-test-all`: Run forward tests for all found `*_best_params_*.yaml` files.
6.  `make trader`: Run the live/simulated trading bot, loading parameters from a specified `*_best_params_*.yaml` file (`--param-config`) and using `config/runtime_config.yaml` for potential overrides/reloads.
7.  `make lint` / `make format`: Code quality.

**Notes:**
*   Uses Poetry (Python >= 3.11).
*   Type hints checked with MyPy (with some necessary ignores).
*   Live trading requires API keys.
*   Filter parameters and risk parameters (SL/TP) are part of the strategy parameters, configured via YAML files.
